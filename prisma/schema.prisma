// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(cuid())
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  Playlist  Playlist[]
}

model Playlist {
  id           String            @id @default(cuid())
  title        String
  thumbnailUrl String
  userId       String
  user         User              @relation(fields: [userId], references: [id])
  videos       PlaylistOnVideo[]

  createdAt DateTime @default(now())

  @@unique([title, userId])
}

model Album {
  id           String       @id @default(cuid())
  title        String
  thumbnailUrl String
  type         AlbumType    @default(SINGLE)
  videos       AlbumVideo[]

  createdAt DateTime @default(now())

  @@unique([title])
}

model Artist {
  id        String @id @default(cuid())
  name      String
  channelId String

  createdAt DateTime        @default(now())
  videos    ArtistOnVideo[]

  @@unique([name, channelId])
}

model Video {
  id             String @id @default(cuid())
  youtubeVideoId String
  start          Int
  end            Int
  originalTitle  String
  title          String
  thumbnailUrl   String

  publishedAt DateTime?

  createdAt DateTime          @default(now())
  albums    AlbumVideo[]
  artists   ArtistOnVideo[]
  playlists PlaylistOnVideo[]

  @@unique([youtubeVideoId, start, end])
}

model AlbumVideo {
  albumId    String
  album      Album    @relation(fields: [albumId], references: [id])
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id])
  assignedAt DateTime @default(now())

  @@id([albumId, videoId])
  @@map("albums_videos")
}

model ArtistOnVideo {
  artistId   String
  artist     Artist   @relation(fields: [artistId], references: [id])
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id])
  assignedAt DateTime @default(now())

  @@id([artistId, videoId])
  @@map("artists_videos")
}

model PlaylistOnVideo {
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id])
  assignedAt DateTime @default(now())

  @@id([playlistId, videoId])
  @@map("playlists_videos")
}

enum Role {
  USER
  ADMIN
}

enum AlbumType {
  SINGLE
  LIVE
}
